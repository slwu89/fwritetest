// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// Split_Aggregate
void Split_Aggregate(String& maleFile, String& femaleFile, String eol, NumericMatrix& maleMat, NumericMatrix& femaleMat);
RcppExport SEXP _fwritetest_Split_Aggregate(SEXP maleFileSEXP, SEXP femaleFileSEXP, SEXP eolSEXP, SEXP maleMatSEXP, SEXP femaleMatSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String& >::type maleFile(maleFileSEXP);
    Rcpp::traits::input_parameter< String& >::type femaleFile(femaleFileSEXP);
    Rcpp::traits::input_parameter< String >::type eol(eolSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type maleMat(maleMatSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type femaleMat(femaleMatSEXP);
    Split_Aggregate(maleFile, femaleFile, eol, maleMat, femaleMat);
    return R_NilValue;
END_RCPP
}
// Mean_Quantiles
void Mean_Quantiles(CharacterVector& maleNames, CharacterVector& femaleNames, bool& doMean, bool& doQuant, NumericVector& quantiles, CharacterVector& colNames, String& eol, arma::Cube<arma::uword>& maleData, arma::Cube<arma::uword>& femaleData);
RcppExport SEXP _fwritetest_Mean_Quantiles(SEXP maleNamesSEXP, SEXP femaleNamesSEXP, SEXP doMeanSEXP, SEXP doQuantSEXP, SEXP quantilesSEXP, SEXP colNamesSEXP, SEXP eolSEXP, SEXP maleDataSEXP, SEXP femaleDataSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector& >::type maleNames(maleNamesSEXP);
    Rcpp::traits::input_parameter< CharacterVector& >::type femaleNames(femaleNamesSEXP);
    Rcpp::traits::input_parameter< bool& >::type doMean(doMeanSEXP);
    Rcpp::traits::input_parameter< bool& >::type doQuant(doQuantSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type quantiles(quantilesSEXP);
    Rcpp::traits::input_parameter< CharacterVector& >::type colNames(colNamesSEXP);
    Rcpp::traits::input_parameter< String& >::type eol(eolSEXP);
    Rcpp::traits::input_parameter< arma::Cube<arma::uword>& >::type maleData(maleDataSEXP);
    Rcpp::traits::input_parameter< arma::Cube<arma::uword>& >::type femaleData(femaleDataSEXP);
    Mean_Quantiles(maleNames, femaleNames, doMean, doQuant, quantiles, colNames, eol, maleData, femaleData);
    return R_NilValue;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _fwritetest_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _fwritetest_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _fwritetest_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _fwritetest_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}
// timesTwo
NumericVector timesTwo(NumericVector x);
RcppExport SEXP _fwritetest_timesTwo(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(timesTwo(x));
    return rcpp_result_gen;
END_RCPP
}
// testRead
void testRead(const std::string& fileName);
RcppExport SEXP _fwritetest_testRead(SEXP fileNameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type fileName(fileNameSEXP);
    testRead(fileName);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fwritetest_Split_Aggregate", (DL_FUNC) &_fwritetest_Split_Aggregate, 5},
    {"_fwritetest_Mean_Quantiles", (DL_FUNC) &_fwritetest_Mean_Quantiles, 9},
    {"_fwritetest_rcpparma_hello_world", (DL_FUNC) &_fwritetest_rcpparma_hello_world, 0},
    {"_fwritetest_rcpparma_outerproduct", (DL_FUNC) &_fwritetest_rcpparma_outerproduct, 1},
    {"_fwritetest_rcpparma_innerproduct", (DL_FUNC) &_fwritetest_rcpparma_innerproduct, 1},
    {"_fwritetest_rcpparma_bothproducts", (DL_FUNC) &_fwritetest_rcpparma_bothproducts, 1},
    {"_fwritetest_timesTwo", (DL_FUNC) &_fwritetest_timesTwo, 1},
    {"_fwritetest_testRead", (DL_FUNC) &_fwritetest_testRead, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_fwritetest(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
